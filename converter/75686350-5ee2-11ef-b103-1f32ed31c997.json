{
  "entityType" : "CONVERTER",
  "entity" : {
    "additionalInfo" : {
      "description" : ""
    },
    "configuration" : {
      "scriptLang" : "TBEL",
      "decoder" : "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\nvar payloadStr = decodeToString(payload);\n\n// decode payload to JSON\n// var data = decodeToJson(payload);\n\nvar deviceName = 'Device A';\nvar deviceType = 'thermostat';\nvar customerName = 'Customer C';\nvar groupName = 'thermostat devices';\nvar manufacturer = 'Example corporation';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// Result object with device/asset attributes/telemetry data\nvar result = {\n// Use deviceName and deviceType or assetName and assetType, but not both.\n   deviceName: deviceName,\n   deviceType: deviceType,\n// assetName: assetName,\n// assetType: assetType,\n// customerName: customerName,\n   groupName: groupName,\n   attributes: {\n       model: 'Model A',\n       serialNumber: 'SN111',\n       integrationName: metadata['integrationName'],\n       manufacturer: manufacturer\n   },\n   telemetry: {\n       temperature: 42,\n       humidity: 80,\n       rawData: payloadStr\n   }\n};\n\n/** Helper functions **/\n\nfunction decodeToString(payload) {\n   return String.fromCharCode.apply(String, payload);\n}\n\nfunction decodeToJson(payload) {\n   // covert payload to string.\n   var str = decodeToString(payload);\n\n   // parse string to JSON\n   var data = JSON.parse(str);\n   return data;\n}\n\nreturn result;",
      "tbelDecoder" : "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\n// decode payload to string\n//var payloadStr = decodeToString(payload);\n\n// decode payload to JSON\n var data = decodeToJson(payload);\n\n//var deviceName = 'Device A';\n//var deviceType = 'thermostat';\n//var customerName = 'Customer C';\n//var groupName = 'thermostat devices';\n//var manufacturer = 'Example corporation';\n// use assetName and assetType instead of deviceName and deviceType\n// to automatically create assets instead of devices.\n// var assetName = 'Asset A';\n// var assetType = 'building';\n\n// Result object with device/asset attributes/telemetry data\nvar tt={};\n\n\n\nvar result = [{\n   deviceName: 'DL300-DG-1',\n   deviceType: 'DG',\n   telemetry: {\n PF:data[0].Measurements.Meter_DG_PF,\nEnergy_Total_kWh:data[0].Measurements.Meter_DG_Export_energy_total,\nEnergy_Daily_kWh:data[0].Measurements.Meter_DG_Export_energy_day,\nAC_Apparant_Power_va:data[0].Measurements.Meter_DG_KVA,\nAC_Apparant_Power_va_L3:data[0].Measurements.Meter_DG_KVA_L3,\nAC_Apparant_Power_va_L2:data[0].Measurements.Meter_DG_KVA_L2,\nAC_Apparant_Power_va_L1:data[0].Measurements.Meter_DG_KVAr_L1,\nAC_Reactive_Power_var:data[0].Measurements.Meter_DG_kVar,\nAC_Reactive_Power_var_L3:data[0].Measurements.Meter_DG_kVar_L3,\nAC_Reactive_Power_var_L2:data[0].Measurements.Meter_DG_kVar_L2,\nAC_Reactive_Power_var_L1:data[0].Measurements.Meter_DG_kVar_L1,\nAC_Active_Power_Watt:data[0].Measurements.Meter_DG_kW,\nAC_Active_Power_Watt_L3:data[0].Measurements.Meter_DG_kW_L3,\nAC_Active_Power_Watt_L2:data[0].Measurements.Meter_DG_kW_L2,\nAC_Active_Power_Watt_L1:data[0].Measurements.Meter_DG_kW_L1,\nAMP_L3:data[0].Measurements.Meter_DG_A_L3,\nAMP_L2:data[0].Measurements.Meter_DG_A_L2,\nAMP_L1:data[0].Measurements.Meter_DG_A_L1,\nFrequency_Hz_L3:data[0].Measurements.Meter_DG_Hz_L3,\nFrequency_Hz_L2:data[0].Measurements.Meter_DG_Hz_L2,\nFrequency_Hz_L1:data[0].Measurements.Meter_DG_Hz_L1,\nVOLT_L3_N:data[0].Measurements.Meter_DG_Volt_L3_N,\nVOLT_L2_N:data[0].Measurements.Meter_DG_Volt_L2_N,\nVOLT_L1_N:data[0].Measurements.Meter_DG_Volt_L1_N,\nVOLT_L3_L1:data[0].Measurements.Meter_DG_Volt_L3_L1,\nVOLT_L2_L3:data[0].Measurements.Meter_DG_Volt_L2_L3,\nVOLT_L1_L2:data[0].Measurements.Meter_DG_Volt_L1_L2,\n\n\n\n   }\n},{\n   deviceName: 'DL300-Grid Meter-1',\n   deviceType: 'Meter',\n   telemetry: {\n       PV_Daily_Energy:data[0].Measurements.Meter_PV_Daily_Energy,\nPV_Total_Energy_kWh:data[0].Measurements.Meter_PV_Total_Energy_kWh/1000,\nGrid_Daily_Energy_Import_kWh:data[0].Measurements.Meter_Grid_Daily_Energy_Import_kWh,\nGrid_Total_Energy_Import_kWh:data[0].Measurements.Meter_Grid_Total_Energy_Import_kWh,\nGrid_Daily_Energy_Export_kWh:data[0].Measurements.Meter_Grid_Daily_Energy_Export_kWh,\nGrid_Total_Energy_Export_kWh:data[0].Measurements.Meter_Grid_Total_Energy_Export_kWh,\nBus_B_frequency_L3:data[0].Measurements.Meter_Bus_B_Hz_L3,\nBus_B_frequency_L2:data[0].Measurements.Meter_Bus_B_Hz_L2,\nBus_B_frequency_L1:data[0].Measurements.Meter_Bus_B_Hz_L1,\nBus_B_voltage_L3_N:data[0].Measurements.Meter_Bus_B_V_L3_N,\nBus_B_voltage_L2_N:data[0].Measurements.Meter_Bus_B_V_L2_N,\nBus_B_voltage_L1_N:data[0].Measurements.Meter_Bus_B_V_L1_N,\nBus_B_voltage_L3_L1:data[0].Measurements.Meter_Bus_B_V_L3_L1,\nBus_B_voltage_L2_L3:data[0].Measurements.Meter_Bus_B_V_L2_L3,\nBus_B_voltage_L1_L2:data[0].Measurements.Meter_Bus_B_V_L1_L2,\nGrid_PF:data[0].Measurements.Meter_Grid_PF,\nGrid_Power_kVAR:data[0].Measurements.Meter_Grid_kVAR,\nGrid_Power_kW:data[0].Measurements.Meter_Grid_kW,\nGrid_Power_KVA:data[0].Measurements.Meter_Grid_KVA,\nGrid_AVG_Frequency : (data[0].Measurements.Meter_Bus_B_Hz_L1+data[0].Measurements.Meter_Bus_B_Hz_L2+data[0].Measurements.Meter_Bus_B_Hz_L3)/3 // same copy in cal\n\n   }\n},{\n    deviceName: 'Durtek_Device',\n   deviceType: 'Inverter',\n   telemetry: {\n      // INV_Total_Power:(data[0].Measurements.Inv_Active_Power_W + data[1].Measurements.Inv_Active_Power_W + data[2].Measurements.Inv_Active_Power_W) ,\n       //INV_DailyEnergy_Total:data[3].Measurements.SRILANKA300_Inverter_PV_Daily_Energy,\n       //SL_Load_Power:(data[0].Measurements.Inv_Active_Power_W + data[1].Measurements.Inv_Active_Power_W + data[2].Measurements.Inv_Active_Power_W)+ data[3].Measurements.SRILANKA300_Inverter_Grid_Power_kW + data[3].Measurements.SRILANKA300_Inverter_Generator_power,\n       //SL_Co2_Saving:(data[0].Measurements.SRILANKA300_Inverter_WattHours_WH + data[1].Measurements.SRILANKA300_Inverter_WattHours_WH + data[2].Measurements.SRILANKA300_Inverter_WattHours_WH)*0.82,\n       //SL_CUF:(data[3].Measurements.SRILANKA300_Inverter_PV_Total_Energy_kWh/2890800)*100,\n       //SL_INV_Load_Percent_kW:((data[0].Measurements.SRILANKA300_Inverter_Watts_W + data[1].Measurements.SRILANKA300_Inverter_Watts_W + data[2].Measurements.SRILANKA300_Inverter_Watts_W)/((data[0].Measurements.SRILANKA300_Inverter_Watts_W + data[1].Measurements.SRILANKA300_Inverter_Watts_W + data[2].Measurements.SRILANKA300_Inverter_Watts_W)+ (data[3].Measurements.SRILANKA300_Inverter_Grid_Power_kW + data[3].Measurements.SRILANKA300_Inverter_Generator_power)))*100,\n       //SL_DG_Load_Percent_kW:(data[3].Measurements.SRILANKA300_Inverter_Generator_power/(data[0].Measurements.SRILANKA300_Inverter_Watts_W + data[1].Measurements.SRILANKA300_Inverter_Watts_W + data[2].Measurements.SRILANKA300_Inverter_Watts_W + data[3].Measurements.SRILANKA300_Inverter_Grid_Power_kW + data[3].Measurements.SRILANKA300_Inverter_Generator_power))*100,\n       //SL_Grid_Percent_kW:(data[3].Measurements.SRILANKA300_Inverter_Grid_Power_kW /(data[0].Measurements.SRILANKA300_Inverter_Watts_W + data[1].Measurements.SRILANKA300_Inverter_Watts_W + data[2].Measurements.SRILANKA300_Inverter_Watts_W + data[3].Measurements.SRILANKA300_Inverter_Grid_Power_kW + data[3].Measurements.SRILANKA300_Inverter_Generator_power))*100,\n       //Sp_Yild_Durtek:data[3].Measurements.SRILANKA300_Inverter_PV_Daily_Energy/330,\n       //INV_Total_Energy_kWh:data[3].Measurements.SRILANKA300_Inverter_PV_Total_Energy_kWh,\n       //SL_INV_GENERATING_MODE:((tt.INV1_GEN_MODE + tt.INV2_GEN_MODE + tt.INV3_GEN_MODE)/3)*100,\n       //SL_INV_COMM_FAIL_MODE:((yy.INV1_com_fail + yy.INV2_com_fail + yy.INV3_com_fail)/3)*100,\n       //SL_INV_FAULT_MODE:((zz.INV1_Fault + zz.INV2_Fault + zz.INV1_Fault)/3)*100,\n       \n       PV_Total_Energy_kWh:data[0].Measurements.Meter_PV_Total_Energy_kWh/1000,\n       DG_Total_Power : data[0].Measurements.Meter_DG_kW,\n       DG_Total_Energy : data[0].Measurements.Meter_DG_Export_energy_day,\n       Total_Grid_Power:data[0].Measurements.Meter_Grid_kW,\n       PV_Daily_Energy_Today:data[0].Measurements.Meter_PV_Daily_Energy,\n       Grid_AVG_Frequency : (data[0].Measurements.Meter_Bus_B_Hz_L1+data[0].Measurements.Meter_Bus_B_Hz_L2+data[0].Measurements.Meter_Bus_B_Hz_L3)/3,\n       Grid_AVG_Voltage : (data[0].Measurements.Meter_Bus_B_V_L3_L1+data[0].Measurements.Meter_Bus_B_V_L1_L2+data[0].Measurements.Meter_Bus_B_V_L2_L3)/3,\n       Grid_Daily_Energy_Import_kWh:data[0].Measurements.Meter_Grid_Daily_Energy_Import_kWh,\n       Grid_Daily_Energy_Export_kWh:data[0].Measurements.Meter_Grid_Daily_Energy_Export_kWh,\n       Specific_Yield : data[0].Measurements.Meter_PV_Daily_Energy / 300, //300 = DC Capacity of a plant\n       \n   },\n   \n },\n {deviceName: 'cal',deviceType:'inv_agg',\n  // telemetry: {SL_PV_Daily_Energy:data[3].Measurements.SRILANKA300_Inverter_PV_Daily_Energy,\n  // SL_INV_Total_Power:(data[0].Measurements.SRILANKA300_Inverter_Watts_W + data[1].Measurements.SRILANKA300_Inverter_Watts_W + data[2].Measurements.SRILANKA300_Inverter_Watts_W)\n  // }\n     \n }];\n\n/** Helper functions 'decodeToString' and 'decodeToJson' are already built-in **/\n\nreturn result;",
      "encoder" : null,
      "tbelEncoder" : null,
      "updateOnlyKeys" : [ "manufacturer" ]
    },
    "debugMode" : true,
    "edgeTemplate" : false,
    "externalId" : null,
    "id" : {
      "entityType" : "CONVERTER",
      "id" : "75686350-5ee2-11ef-b103-1f32ed31c997"
    },
    "name" : "Uplink data converter for MQTT integration DL300_Meter_DG",
    "type" : "UPLINK"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}