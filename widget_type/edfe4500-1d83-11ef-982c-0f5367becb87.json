{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "card3",
    "name" : "card3",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "timeseries",
      "sizeX" : 8,
      "sizeY" : 5,
      "resources" : [ ],
      "templateHtml" : "<section>\r\n    <div id=\"header3\">\r\n        <div id=\"logo3\">\r\n            <img src=\"https://i.pinimg.com/736x/7e/53/46/7e5346bb22bfd15fa169b621f6bc2afe.jpg\" alt=\"solar\" style=\"height:50px;width:50px\">\r\n        </div>\r\n        <div id=\"dot3\"><b>Energy</b></div>\r\n    </div>\r\n    <div id='btn3'>\r\n        <button type=\"button\" id=\"daily3\" onclick=\"daily3()\" class=\"active\">Daily</button>\r\n        <button type=\"button\" id=\"monthly3\" onclick=\"monthly3()\">Monthly</button>\r\n        <button type=\"button\" id=\"yearly3\" onclick=\"yearly3()\">Yearly</button>\r\n    </div>\r\n    \r\n    <!--<div class=\"data-container3\" fxFlex fxLayout=\"column\" style=\"height: 100%;\" fxLayoutAlign=\"center stretch\">-->\r\n    <!--    <div class=\"data-row3\" fxFlex fxLayout=\"row\" *ngFor=\"let dataKeyData of data\" fxLayoutAlign=\"space-between center\">-->\r\n    <!--        <div class=\"data-key3\" >{{ dataKeyData.dataKey.label }}:</div>-->\r\n    <!--        <div class=\"data-value3\">{{ dataKeyData.data[0] && dataKeyData.data[0][1] }}</div>-->\r\n    <div class=\"data-container3\">\r\n        <div class=\"data-row3\" *ngFor=\"let dataKeyData of data\">\r\n            <div class=\"data-key3\">{{ dataKeyData.dataKey.label }}:</div>\r\n            <div class=\"data-value3\">{{ dataKeyData.data[0] && dataKeyData.data[0][1] | number:'1.2-2' }}</div>\r\n    \r\n        </div>\r\n    </div>\r\n    <div class=\"data-table3\"></div>\r\n    <!--    </div>-->\r\n    <!--</div>-->\r\n</section>",
      "templateCss" : "    section {\r\n        margin: auto;\r\n        padding: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        border: 1px solid #999; \r\n        border-radius: 5px;\r\n        overflow-y: auto;\r\n    }\r\n    #header3 {\r\n        /*margin: auto;*/\r\n        /*padding: 0;*/\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        width: 90%;\r\n    }\r\n    #dot3 {\r\n        /*height: 12px;*/\r\n        /*width: 12px;*/\r\n        /*border-radius: 50%;*/\r\n        /*background: red;*/\r\n        color: #000;\r\n    }\r\n    #btn3 {\r\n        margin: auto;\r\n        padding: 0;\r\n        display: flex;\r\n        justify-content: space-between;\r\n        border-top: 1px solid #999;\r\n        border-bottom:1px solid #999 ;\r\n    }\r\n\r\n    button {\r\n        flex-grow: 1;\r\n        padding: 10px 0;\r\n        border: none;\r\n        cursor: pointer;\r\n        background: transparent;\r\n        letter-spacing: 1px;\r\n        position: relative;\r\n        outline: none;\r\n    }\r\n     .active:after {\r\n        content: \"\";\r\n        position: absolute;\r\n        bottom: -1px;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 2px;\r\n        border: none;\r\n        border-bottom: 2px solid blue;\r\n    }\r\n\r\n    .data-container3 {\r\n        display: flex;\r\n        flex-direction: column;\r\n        margin: 10px;\r\n    }\r\n\r\n    .data-row3 {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        margin-bottom: 2px;\r\n        line-height: 20px;\r\n    }\r\n\r\n    .data-key3 {\r\n        margin-right: 5px;\r\n        color: #666;\r\n        align-content: flex-start;\r\n    }\r\n    \r\n    .data-value3 {\r\n        color: green;\r\n        align-content: flex-end;\r\n        font-weight: 600;\r\n    }\r\n    \r\n    @media (min-height: 400px) {\r\n        .data-row3 {\r\n            font-size: 12px; /* Adjust font size */\r\n            margin-bottom: 2px; /* Adjust margin */\r\n        }\r\n    }",
      "controllerScript" : "    \r\n    \r\n    self.onInit = function() {\r\n       self.ctx.$scope.data = self.ctx.defaultSubscription.data;\r\n       console.log(\"init\" ,self.ctx.data)\r\n        //  self.ctx.widgetConfig.timewindow.selectedTab = 0\r\n       \r\n    }\r\n        \r\n    // var intervalId;\r\n    self.onDataUpdated = function() {\r\n        self.ctx.detectChanges();\r\n        // console.log(\"up \",self.ctx.defaultSubscription.timeWindow)\r\n        // console.log(\"Data \", self.ctx.data)\r\n        // console.log(\"HISTORY\", self.ctx.widgetConfig.timewindow)\r\n\r\n    \r\n};\r\n      daily3 = function(){\r\n        //   clearInterval(intervalId)\r\n        self.ctx.timewindowFunctions.onResetTimewindow();\r\n        document.getElementById(\"daily3\").classList.add(\"active\");\r\n        document.getElementById(\"monthly3\").classList.remove(\"active\");\r\n        document.getElementById(\"yearly3\").classList.remove(\"active\");\r\n        document.getElementsByClassName('data-table3')[0].style.display = \"none\"\r\n        document.getElementsByClassName('data-container3')[0].style.display = \"flex\"\r\n        \r\n        console.log(\"daily\", self.ctx.data)\r\n        // var htmlContent = '';\r\n        // self.ctx.data.forEach(function(dataKeyData) {\r\n        //     htmlContent += '<div class=\"data-row3\">' +\r\n        //                       '<div class=\"data-key3\">' + dataKeyData.dataKey.label + ':</div>' +\r\n        //                       '<div class=\"data-value3\">' + (dataKeyData.data[0] && dataKeyData.data[0][1].toFixed(2)) + '</div>' +\r\n        //                   '</div>';\r\n        // });\r\n        \r\n        // document.getElementsByClassName('data-container3')[0].innerHTML = htmlContent;\r\n        // Periodically update data container every 1 second\r\n        \r\n// clearInterval(intervalId);\r\n//  intervalId = setInterval(daily3, 1000);\r\n    // Set up the interval and store the interval ID\r\n\r\n// Clear the interval by passing the interval ID to clearInterval\r\n\r\n        \r\n    }\r\n    \r\n    monthly3 = function() {\r\n        // self.ctx.timewindowFunctions.onResetTimewindow();\r\n        // clearInterval(intervalId)\r\n        document.getElementById(\"daily3\").classList.remove(\"active\");\r\n        document.getElementById(\"monthly3\").classList.add(\"active\");\r\n        document.getElementById(\"yearly3\").classList.remove(\"active\");\r\n        document.getElementsByClassName('data-container3')[0].style.display = \"none\"\r\n        document.getElementsByClassName('data-container3')[0].style.display = \"none\"\r\n        var currentTime3 = new Date().getTime();\r\n        // var currentDate3 = new Date().getDate()\r\n        // console.log(currentDate)\r\n        // Set today's date and time to 11:59 PM\r\n        // var endOfDay3 = new Date();\r\n        // endOfDay3.setHours(23, 59, 0, 0);\r\n        \r\n        // Calculate milliseconds remaining until 11:59 PM today\r\n        // var millisecondsRemaining3 = endOfDay3.getTime() - currentTime3;\r\n        // var lastMonth3 = (currentTime3+millisecondsRemaining3) - (currentDate3*86400000)\r\n        // self.ctx.widgetConfig.timewindow.selectedTab = 0\r\n        // self.ctx.widgetConfig.timewindow.realtime.realtimeType = 1\r\n        // self.ctx.widgetConfig.timewindow.realtime.interval = 2592000000\r\n        // self.ctx.widgetConfig.timewindow.realtime.quickInterval = \"CURRENT_DAY\"\r\n        // self.ctx.widgetConfig.timewindow.realtime.timewindowMs = 60000\r\n        // self.ctx.timewindowFunctions.onUpdateTimewindow((currentTime3-(2592000000)), currentTime3)\r\n        // console.log(\"month start \" + (currentTime3-(2592000000)) + \"end \" + currentTime3);\r\n        // console.log(self.ctx.widgetConfig.timewindow)\r\n        \r\n                // console.log(\"monthly\", self.ctx.data)\r\n                var obj = self.ctx.data;\r\n                var label = [];\r\n                var keys = \"\";\r\n                obj.forEach((elem) => {\r\n                label.push(elem.dataKey.label);\r\n                keys += elem.dataKey.name + \",\";\r\n                });\r\n                    \r\n                console.log(999, label, keys)\r\n                \r\n                var Sts3 = currentTime3-2592000000;\r\n                \r\n                var url = 'https://thingsboard.cloud:443/api/plugins/telemetry/DEVICE/1d6bf390-0912-11ef-a118-5dbbb18067d6/values/timeseries?keys='+keys+'&startTs='+Sts3+'&endTs='+currentTime3+'&intervalType=MONTH&agg=AVG';\r\n                \r\n                var accessToken = localStorage.getItem('jwt_token');\r\n                var headers = {\r\n                  'Content-Type': 'application/json',\r\n                  'X-Authorization': \"Bearer \"+ accessToken,\r\n                };\r\n                console.log(headers, url)\r\n                fetch(url, {\r\n                  method: 'GET',\r\n                  headers: headers,\r\n                })\r\n                .then(response => {\r\n                  if (!response.ok) {\r\n                    throw new Error('Network response was not ok');\r\n                  }\r\n                  return response.json();\r\n                })\r\n                .then(data => {\r\n                  console.log('Data from ThingsBoard:', data);\r\n                  htmlRow(data, label)\r\n                })\r\n                .catch(error => {\r\n                  console.error('There was a problem with your fetch operation:', error);\r\n                });\r\n\r\n    }\r\n    yearly3 = function() {\r\n        // clearInterval(intervalId)\r\n        self.ctx.timewindowFunctions.onResetTimewindow();\r\n        document.getElementById(\"daily3\").classList.remove(\"active\");\r\n        document.getElementById(\"monthly3\").classList.remove(\"active\");\r\n        document.getElementById(\"yearly3\").classList.add(\"active\");\r\n        // Get the current date\r\n    var currentDate3 = new Date();\r\n    \r\n    // Determine the previous year\r\n    var previousYear3 = currentDate3.getFullYear() - 1;\r\n    \r\n    // Set the date to December 31 of the previous year\r\n    var endOfPreviousYear3 = new Date(previousYear3, 11, 31);\r\n    \r\n    // Set the time to 11:59 PM\r\n    endOfPreviousYear3.setHours(23, 59, 58, 999);\r\n    \r\n    // Calculate milliseconds remaining until December 31 of the previous year, 11:59 PM\r\n    var endTime3 = endOfPreviousYear3.getTime()\r\n        self.ctx.timewindowFunctions.onUpdateTimewindow((endTime3-31556926000), endTime3 )\r\n        console.log(\"month start \" + (endTime3-(2592000000)) + \"end \" + endTime3);\r\n            self.ctx.widgetConfig.timewindow.selectedTab = 0\r\n        console.log(\"Year\", self.ctx.data)\r\n        \r\n        // var averages = []\r\n        // self.ctx.data.forEach((elem)=>\r\n        //     {\r\n        //         var values = elem.data.map(innerArray => innerArray[1])\r\n        //         var sum = values.reduce((acc, val) => acc+val,0)\r\n        //         averages.push([1, sum/(elem.data.length)])\r\n        //     }\r\n        \r\n        // )\r\n        // console.log(averages)\r\n        \r\n        // htmlRow(averages)\r\n        // clearInterval(intervalId);\r\n        // intervalId = setInterval(yearly3, 2000);\r\n        // for(var i=0; i<averages.length;i++ )\r\n        // {\r\n        //     self.ctx.data[i].data = [averages[i]]\r\n        // }\r\n    //   self.ctx.widgetConfig.timewindow.realtime.timewindowMs = 2592000000\r\n    //   self.ctx.widgetConfig.timewindow.realtime.interval = 86400000\r\n    }\r\n    \r\n    htmlRow = function(data, label) {\r\n        console.log(data, label)\r\n        var value = []\r\n        for(let key in data){\r\n            value.push(data[key])\r\n        }\r\n        var Fval = []\r\n        value.forEach((elem)=>{\r\n            Fval.push((elem[0].value))\r\n        })\r\n        // var Lval = []\r\n        // Fval.forEach((elem) => {\r\n        //     Lval.push(elem.toFixed(2))\r\n        // })\r\n        \r\n        var rows = \" \";\r\n        var elem = document.getElementsByClassName('data-table3')[0];\r\n        for(var i=0;i<label.length;i++){\r\n            console.log(Fval[i])\r\n            rows += '<div class=\"data-row3\"><div class=\"data-key3\">'+label[i]+'</div><div class=\"data-value3\">'+Fval[i]+'</div></div>';\r\n            // console.log(value[0][i].value)\r\n        }\r\n        elem.innerHTML = rows\r\n    };\r\n    // monthly33 = function() {\r\n        \r\n        // for(var i=0; i<9; i++) {\r\n            // setInterval(monthly3, 5000)\r\n        // }\r\n    // }",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}",
      "latestDataKeySettingsSchema" : "{}",
      "settingsDirective" : "tb-flot-line-widget-settings",
      "dataKeySettingsDirective" : "tb-flot-line-key-settings",
      "latestDataKeySettingsDirective" : "tb-flot-latest-key-settings",
      "hasBasicMode" : true,
      "basicModeDirective" : "tb-flot-basic-config",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"First\",\"color\":\"#2196f3\",\"settings\":{\"showLines\":true,\"fillLines\":true,\"showPoints\":false},\"_hash\":0.8587686344902596,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Second\",\"color\":\"#ffc107\",\"settings\":{\"showLines\":true,\"fillLines\":false,\"showPoints\":false},\"_hash\":0.12775350966079668,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"third\",\"color\":\"#f44336\",\"settings\":{},\"_hash\":0.2796122294138472,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\",\"aggregationType\":null,\"units\":null,\"decimals\":null,\"usePostProcessing\":null,\"postFuncBody\":null}],\"alarmFilterConfig\":{\"statusList\":[\"ACTIVE\"]}}],\"timewindow\":{\"hideInterval\":false,\"hideLastInterval\":false,\"hideQuickInterval\":false,\"hideAggregation\":false,\"hideAggInterval\":false,\"hideTimezone\":false,\"selectedTab\":0,\"realtime\":{\"realtimeType\":0,\"timewindowMs\":60000,\"quickInterval\":\"CURRENT_DAY\",\"interval\":1000},\"aggregation\":{\"type\":\"AVG\",\"limit\":50000}},\"showTitle\":false,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0\",\"settings\":{\"stack\":false,\"fontSize\":10,\"fontColor\":\"#545454\",\"showTooltip\":true,\"tooltipIndividual\":false,\"tooltipCumulative\":false,\"hideZeros\":false,\"grid\":{\"verticalLines\":true,\"horizontalLines\":true,\"outlineWidth\":1,\"color\":\"#545454\",\"backgroundColor\":null,\"tickColor\":\"#DDDDDD\"},\"xaxis\":{\"title\":null,\"showLabels\":true,\"color\":\"#545454\"},\"yaxis\":{\"min\":null,\"max\":null,\"title\":null,\"showLabels\":true,\"color\":\"#545454\",\"tickSize\":null,\"tickDecimals\":0,\"ticksFormatter\":\"\"},\"shadowSize\":4,\"smoothLines\":false,\"comparisonEnabled\":false,\"xaxisSecond\":{\"axisPosition\":\"top\",\"title\":null,\"showLabels\":true},\"showLegend\":true,\"legendConfig\":{\"direction\":\"column\",\"position\":\"bottom\",\"sortDataKeys\":false,\"showMin\":false,\"showMax\":false,\"showAvg\":true,\"showTotal\":false,\"showLatest\":false},\"customLegendEnabled\":false},\"title\":\"card3\",\"dropShadow\":false,\"enableFullscreen\":false,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"mobileHeight\":null,\"configMode\":\"advanced\",\"actions\":{},\"showTitleIcon\":false,\"titleIcon\":\"thermostat\",\"iconColor\":\"#1F6BDD\",\"enableDataExport\":false,\"widgetStyle\":{},\"widgetCss\":\"\",\"pageSize\":1024,\"noDataDisplayMessage\":\"\",\"useDashboardTimewindow\":false,\"displayTimewindow\":true}"
    },
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "edfe4500-1d83-11ef-982c-0f5367becb87"
    },
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}