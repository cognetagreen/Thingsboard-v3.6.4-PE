{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "specific_yield",
    "name" : "Specific Yield",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "timeseries",
      "sizeX" : 8,
      "sizeY" : 4,
      "resources" : [ {
        "url" : "https://code.highcharts.com/highcharts.js"
      }, {
        "url" : "https://code.highcharts.com/modules/exporting.js"
      }, {
        "url" : "https://code.highcharts.com/modules/export-data.js"
      } ],
      "templateHtml" : "\r\n<div id=\"SY\" class=\"SY\" style=\"width: 100%;\"></div>\r\n\r\n\r\n",
      "templateCss" : ".SY {\n    padding-top: 8px;\n    height: 100%;\n}\n\n.legend {\n    font-size: 13px;\n    line-height: 10px;\n}\n\n.legend table { \n    border-spacing: 0px;\n    border-collapse: separate;\n}\n\n.mouse-events .flot-overlay {\n    cursor: crosshair; \n}\n\n",
      "controllerScript" : "var myChart;\n\nself.onInit = function() {\n    \n    var chartData = {\n        series: []\n    };\n\n    for (var i=0; i < self.ctx.data.length; i++) {\n        var dataKey = self.ctx.data[i].dataKey;\n        var series = {\n            name: dataKey.label,\n            data: [],\n            color: dataKey.color\n        };\n        chartData.series.push(series);\n    }\n    \n    var options = {\n        chart: {\n            type: 'bar',\n            height: '70%', // Set initial height to 50%\n            events: {\n                load: function () {\n                    this.reflow(); // Trigger reflow on chart load\n                },\n            //     redraw: function () {\n            //     var chart = this,\n            //         containerWidth = chart.renderTo.offsetWidth,\n            //         containerHeight = chart.renderTo.offsetHeight;\n\n            //     chart.setSize(containerWidth, containerHeight, false);\n            // }\n            },\n            renderTo: 'SY',\n        },\n        title: false,\n        //     text: 'Active Power' \n        // },\n        tooltip: {\n            shared : true\n        },\n        xAxis: {\n            type: 'datetime',\n            tickPixelInterval: 150,\n            title: {\n                text: 'kWh/kWp'\n            }\n        },\n        // yAxis: {\n            \n        // },\n        legend: {\n            enabled: true,\n            itemStyle : {\n                fontSize : \"10px\"\n            }\n        },\n        plotOptions: {\n            series: {\n                // Remove marker and shadow options\n            },\n            bar: {\n                pointWidth: 30,\n                borderRadius: 5,\n                dataLabels: {\n                    enabled: true,\n                    style: {\n                        fontSize: '8px'\n                    },\n                    formatter: function() {\n                        // return Highcharts.numberFormat(this.y, 2);\n                        return this.series.name + ': ' + Highcharts.numberFormat(this.y, 2);\n                    },\n                },\n            },\n            column: {\n                pointPadding: 0,\n                groupPadding:0.1,\n                // pointRange: 1 \n            },\n            \n        },\n        exporting: {\n            buttons: {\n                contextButton: {\n                    menuItems: ['downloadCSV', 'downloadPNG'] // Specify CSV and PNG download options\n                }\n            }\n        },\n    credits: {\n            enabled: false // Remove Highcharts logo\n        }\n    };\n    \n    myChart = new Highcharts.Chart(options);\n    self.onResize();\n}\n\nself.onResize = function() {\n        // // height: '45%'\n        // myChart.reflow();\n        if (myChart) {\n        var chartContainer = document.getElementById('SY'); \n        var containerWidth = chartContainer.offsetWidth;\n        var containerHeight = chartContainer.offsetHeight;\n        myChart.setSize(containerWidth, '50%', false);\n        // this.reflow();\n        \n    }\n}\n\nself.onDataUpdated = function() {\n    for (var i = 0; i < self.ctx.data.length; i++) {\n        var datasourceData = self.ctx.data[i];\n        var dataSet = datasourceData.data;\n        var series = myChart.series[i];\n        if (!series) {\n            series = myChart.addSeries({\n                name: datasourceData.dataKey.label,\n                data: [],\n                color: self.ctx.data[i].dataKey.color\n            }, false);\n        }\n        var data = dataSet.map(function(tsValuePair) {\n            return { x: tsValuePair[0], y: tsValuePair[1] };\n        });\n        series.setData(data, true);\n    }\n}",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}",
      "latestDataKeySettingsSchema" : "{}",
      "settingsDirective" : "tb-flot-line-widget-settings",
      "dataKeySettingsDirective" : "tb-flot-line-key-settings",
      "latestDataKeySettingsDirective" : "tb-flot-latest-key-settings",
      "hasBasicMode" : true,
      "basicModeDirective" : "tb-flot-basic-config",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"First\",\"color\":\"#10DE35\",\"settings\":{\"showLines\":true,\"fillLines\":true,\"showPoints\":false},\"_hash\":0.8587686344902596,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\",\"aggregationType\":null,\"units\":null,\"decimals\":null,\"usePostProcessing\":null,\"postFuncBody\":null},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Second\",\"color\":\"#ffc107\",\"settings\":{\"showLines\":true,\"fillLines\":false,\"showPoints\":false},\"_hash\":0.12775350966079668,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"stack\":false,\"fontSize\":10,\"fontColor\":\"#545454\",\"showTooltip\":true,\"tooltipIndividual\":false,\"tooltipCumulative\":false,\"hideZeros\":false,\"grid\":{\"verticalLines\":true,\"horizontalLines\":true,\"outlineWidth\":1,\"color\":\"#545454\",\"backgroundColor\":null,\"tickColor\":\"#DDDDDD\"},\"xaxis\":{\"title\":null,\"showLabels\":true,\"color\":\"#545454\"},\"yaxis\":{\"min\":null,\"max\":null,\"title\":null,\"showLabels\":true,\"color\":\"#545454\",\"tickSize\":null,\"tickDecimals\":0,\"ticksFormatter\":\"\"},\"shadowSize\":4,\"smoothLines\":false,\"comparisonEnabled\":false,\"xaxisSecond\":{\"axisPosition\":\"top\",\"title\":null,\"showLabels\":true},\"showLegend\":true,\"legendConfig\":{\"direction\":\"column\",\"position\":\"bottom\",\"sortDataKeys\":false,\"showMin\":false,\"showMax\":false,\"showAvg\":true,\"showTotal\":false,\"showLatest\":false},\"customLegendEnabled\":false},\"title\":\"Specific Yield\",\"dropShadow\":true,\"enableFullscreen\":true,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"mobileHeight\":null,\"configMode\":\"basic\",\"actions\":{},\"showTitleIcon\":false,\"titleIcon\":\"thermostat\",\"iconColor\":\"#1F6BDD\",\"useDashboardTimewindow\":true,\"displayTimewindow\":true,\"titleFont\":null,\"titleColor\":null,\"enableDataExport\":true}"
    },
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "a49fc4b0-1d83-11ef-982c-0f5367becb87"
    },
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}