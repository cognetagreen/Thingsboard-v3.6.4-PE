{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "dg_runtime_dief",
    "name" : "DG_Runtime_Dief",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "timeseries",
      "sizeX" : 8,
      "sizeY" : 5,
      "resources" : [ ],
      "templateHtml" : "    <!--<div class=\"data-container3\">-->\r\n    <!--    <div class=\"data-row3\" *ngFor=\"let dataKeyData of data\">-->\r\n    <!--        <div class=\"data-key3\">{{ dataKeyData.dataKey.label }}:</div>-->\r\n    <!--        <div class=\"data-value3\">{{ dataKeyData.data[0] && dataKeyData.data[0][1] | number:'1.2-2' }}</div>-->\r\n    \r\n    <!--    </div>-->\r\n    <!--</div>-->\r\n    \r\n    <!--<div class=\"data-container5\">-->\r\n    <!--    <div class=\"mainLabel5\"></div>-->\r\n    <!--    <div class=\"data-row5\">-->\r\n    <!--        <div class=\"data-key5 val1\"></div>-->\r\n    <!--        <div class=\"data-value5 val1\"></div>-->\r\n    <!--        <div class=\"data-valued5 val1\"></div>-->\r\n    <!--    </div>-->\r\n    <!--    <div class=\"data-row5\">-->\r\n    <!--        <div class=\"data-key5 val2\"></div>-->\r\n    <!--        <div class=\"data-value5 val2\"></div>-->\r\n    <!--        <div class=\"data-valued5 val2\"></div>-->\r\n    <!--    </div>-->\r\n    <!--    <div class=\"data-row5\">-->\r\n    <!--        <div class=\"data-key5 val3\"></div>-->\r\n    <!--        <div class=\"data-value5 val3\"></div>-->\r\n    <!--        <div class=\"data-valued5 val3\"></div>-->\r\n    <!--    </div>-->\r\n    <!--    <div class=\"data-row5\">-->\r\n    <!--        <div class=\"data-key5 val4\"></div>-->\r\n    <!--        <div class=\"data-value5 val4\"></div>-->\r\n    <!--        <div class=\"data-valued5 val4\"></div>-->\r\n    <!--    </div>-->\r\n    <!--    <div class=\"data-row5\">-->\r\n    <!--        <div class=\"tHr_key\"></div>-->\r\n    <!--        <div class=\"tHr_value\"></div>-->\r\n    <!--    </div>-->\r\n    <!--</div>-->\r\n<section id=\"none\">\r\n    <div id=\"headerDGSE\">\r\n        <div id=\"logoDGSE\">\r\n            <img src=\"https://t3.ftcdn.net/jpg/04/09/90/58/360_F_409905897_Egc9Q5nRaS4n0OinSdQE7WdT4tW3czOg.jpg\" alt=\"solar\" style=\"height:50px;width:50px\">\r\n        </div>\r\n        <div id=\"dotDGSE\"><b></b></div>\r\n    </div>\r\n    \r\n    <div class=\"wrappper\"></div>\r\n</section>",
      "templateCss" : "    section {\r\n        width: 100%;\r\n        height: 100%;\r\n        border-bottom: 1px solid #777;\r\n        display: none;\r\n    }\r\n    #headerDGSE {\r\n        /*margin: auto;*/\r\n        padding: 0 20px;\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        width: 100%;\r\n        border: 1px solid #777;\r\n        border-bottom: none;\r\n    }\r\n    #dotDGSE {\r\n        /*height: 12px;*/\r\n        /*width: 12px;*/\r\n        /*border-radius: 50%;*/\r\n        /*background: red;*/\r\n        color: #01280;\r\n    }\r\n\r\n\r\ntable {\r\n    text-align: center;\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n}\r\ntd, tr, th {\r\n  /*border-top: 1px solid #777;  */\r\n  padding: 5px 0;\r\n}\r\n.wrappper {\r\n    height: 100%;\r\n    border: 1px solid #777;\r\n}\r\n\r\n.data-container5 {\r\n        display: flex;\r\n        flex-direction: column;\r\n        margin: 10px;\r\n    }\r\n\r\n    .data-row5 {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        margin-bottom: 2px;\r\n        line-height: 20px;\r\n    }\r\n\r\n    .data-key5 {\r\n        margin-right: 5px;\r\n        color: #01280;\r\n        align-content: flex-start;\r\n    }\r\n    \r\n    .data-value5 {\r\n        color: green;\r\n        align-content: flex-end;\r\n        font-weight: 600;\r\n    }\r\n    \r\n    @media (min-height: 400px) {\r\n        .data-row5 {\r\n            font-size: 12px; /* Adjust font size */\r\n            margin-bottom: 2px; /* Adjust margin */\r\n        }\r\n    }",
      "controllerScript" : "self.onInit = function() {\n    self.ctx.$scope.data = self.ctx.defaultSubscription\n        .data;\n    trigger();\n    setTimeout(function() {\n        trigger();\n    }, 1000);\n};\n\nself.onDataUpdated = function() {\n\n};\n\ntrigger = function() {\n    // Get current date\n    var currentDate = new Date();\n\n    // Subtract one day to get previous day's date\n    var previousDate = new Date(currentDate);\n    previousDate.setDate(previousDate.getDate());\n\n    // Set start time to 12:00 am\n    var startTime = new Date(previousDate);\n    startTime.setHours(0, 0, 0, 0);\n\n    // Set end time to 11:59:59 pm\n    var endTime = new Date(previousDate);\n    endTime.setHours(23, 59, 59, 999);\n\n    // Convert to timestamps (in milliseconds)\n    var startTimestamp = startTime.getTime();\n    var endTimestamp = endTime.getTime();\n\n    console.log(\"Start Timestamp:\", startTimestamp);\n    console.log(\"End Timestamp:\", endTimestamp);\n\n    self.ctx.timewindowFunctions.onUpdateTimewindow(\n        startTimestamp,\n        endTimestamp,\n        1\n    );\n    \n    var totalRuntime = 0;\n    var totalInstances = 0;\n    var rowsHtml = '';\n    var wrappper = document.getElementsByClassName('wrappper')[0];\n    wrappper.innerHTML = '';\nself.ctx.data.forEach((elem)=>{\n    console.log(elem);\n\n    var values = elem.data.map(arr => [arr[\n        0], arr[1]]);\n    console.log(\"values \", values);\n\n    var [startTimes, startValues, endTimes, endValues] =\n    findStartAndEndTimes(values);\n\n    // Initialize total duration\n    var totalHours = TotalDuration(startTimes, endTimes);\n    console.log(\"totalHours\", totalHours)\n    // Convert the total duration to hours\n    var runtime = Runtime(totalHours.toFixed(2), 0);\n    \n    totalRuntime += totalHours;\n    totalInstances += startValues.length;\nconsole.log(\"totalInstances\", totalInstances)\nconsole.log(startTimes, startValues, endTimes, endValues)\n// for(var k=0; k<(startTimes.length);k++) {\n        // </div>\n        // <div class=\"data-row5\">\n        //     <div class=\"data-key5\">End Time</div>\n        //     <div class=\"data-value5\">${new Date(endTimes[k]).toLocaleString()}</div>\n        //     <div class=\"data-valued5\">${endValues[k]}</div>\n        // </div>\n// }\n    rowsHtml += `\n        <tr>\n            <td style=\"color:${elem.dataKey.color};\">${elem.dataKey.label}</td>\n            <td style=\"color:${elem.dataKey.color};\">${runtime}</td>\n            <td style=\"color:${elem.dataKey.color};\">${startValues.length}</td>\n        </tr>\n    `;\n\n\n// wrappper.innerHTML += `\n// <div class=\"data-container\">\n//     <div class=\"mainLabel\"\">${elem.dataKey.label}</div>\n//     ${rowsHtml}\n//     <div class=\"data-row\">\n//         <div class=\"data-key5\">Total Hour</div>\n//         <div class=\"data-value5\">${totalHours.toFixed(2)}</div>\n//     </div>\n// </div>\n// `;\n\n    });\n    console.log(\"totalRuntime\", totalRuntime);\n    var TotalRuntime = Runtime(totalRuntime.toFixed(2), 1);\n    \n    wrappper.innerHTML += `\n    <table>\n        <thead>\n            <tr>\n                <th>Entity</th>\n                <th>Runtime</th>\n                <th>Run Instances</th>\n            </tr>\n        </thead>\n        <tbody>\n            ${rowsHtml}\n        </tbody>\n        <tfoot>\n            <tr>\n                <th>Total</th>\n                <th>${TotalRuntime}</th>\n                <th>${totalInstances}</th>\n            </tr>\n        </tfoot>\n    </table>\n`;\n};\nfindStartAndEndTimes = function(dataArray) {\n    var startTimes = [];\n    var endTimes = [];\n    var startValues = [];\n    var endValues = [];\n\n    var startTime = null;\n    var endTime = null;\n    var startValue = null;\n    var endValue = null;\n    for (var i = 0; i < dataArray.length; i++) {\n        var timestamp = dataArray[i][0];\n        var value = dataArray[i][1];\n\n        if (value > 0 && startTime === null) {\n            startTime = timestamp;\n            startValue = value;\n            console.log(\"startValue Loop\",startTime, startValue)\n        } else if (value === 0 && startTime !== null) {\n            endTime = dataArray[i - 1][0];\n            endValue = dataArray[i - 1][1];\n            startTimes.push(startTime);\n            endTimes.push(endTime);\n            startValues.push(startValue);\n            console.log(\"startValues else loop\", startValues)\n            endValues.push(endValue);\n            startTime = null;\n            startValue = null;\n            endTime = null;\n            endValue = null;\n        }\n    }\n    // Final check after the loop\nif (startTime !== null) {\n    startTimes.push(startTime);\n    endTimes.push(dataArray[dataArray.length - 1][0]);\n    startValues.push(startValue);\n    endValues.push(dataArray[dataArray.length - 1][1]);\n}\n\n    return [startTimes, startValues, endTimes,\n        endValues\n    ];\n};\n\nTotalDuration = function(startTimes, endTimes) {\n    var totalDuration = 0;\n        // Loop through each pair of start and end times\n    for (var i = 0; i < startTimes.length; i++) {\n        // Calculate the duration between start and end times\n        var duration = endTimes[i] - startTimes[i];\n        // Add the duration to the total duration\n        totalDuration += duration;\n    }\n    var totalHours = (totalDuration / (1000 * 60 * 60));\n    return totalHours;\n};\n\nRuntime = function(totalHours, a) {\n    console.log(totalHours)\n    if(a==1){\n    update_DG_Telemetry(totalHours*60);\n    }\n    var hrs = totalHours.split(\".\")[0];\n    console.log(hrs)\n    var min = Math.floor((totalHours.split(\".\")[1]) * 0.6);\n    console.log(min)\n    return `${hrs + ' Hrs ' + min + ' Min '}`;\n};\n\nupdate_DG_Telemetry = function (totalMinutes) {\n    var url = 'https://thingsboard.cloud/api/v1/XZrLr97vKxqVzutwTiO8/telemetry';\n    var data = {\n        \"DG_Runtime\": totalMinutes\n    };\n    console.log(JSON.stringify(data))\n    fetch(url, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n    })\n// .then(response => response.json())\n// .then(text => {\n//     // Attempt to parse JSON only if text is not empty\n//     const data = text ? JSON.parse(text) : {};\n//     console.log('Success:', data);\n// })\n// .catch((error) => {\n//     console.error('Error:', error);\n// });\n\n}\n// Define the controller within the tb global object",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}",
      "latestDataKeySettingsSchema" : "{}",
      "settingsDirective" : "tb-flot-line-widget-settings",
      "dataKeySettingsDirective" : "tb-flot-line-key-settings",
      "latestDataKeySettingsDirective" : "tb-flot-latest-key-settings",
      "hasBasicMode" : true,
      "basicModeDirective" : "tb-flot-basic-config",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"First\",\"color\":\"#2196f3\",\"settings\":{\"showLines\":true,\"fillLines\":true,\"showPoints\":false},\"_hash\":0.8587686344902596,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Second\",\"color\":\"#ffc107\",\"settings\":{\"showLines\":true,\"fillLines\":false,\"showPoints\":false},\"_hash\":0.12775350966079668,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"hideInterval\":false,\"hideLastInterval\":false,\"hideQuickInterval\":false,\"hideAggregation\":false,\"hideAggInterval\":false,\"hideTimezone\":false,\"selectedTab\":1,\"history\":{\"historyType\":1,\"fixedTimewindow\":{\"startTimeMs\":1713551400000,\"endTimeMs\":1713637799999},\"interval\":173000},\"aggregation\":{\"type\":\"AVG\",\"limit\":50000}},\"showTitle\":false,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0\",\"settings\":{\"stack\":false,\"fontSize\":10,\"fontColor\":\"#545454\",\"showTooltip\":true,\"tooltipIndividual\":false,\"tooltipCumulative\":false,\"hideZeros\":false,\"grid\":{\"verticalLines\":true,\"horizontalLines\":true,\"outlineWidth\":1,\"color\":\"#545454\",\"backgroundColor\":null,\"tickColor\":\"#DDDDDD\"},\"xaxis\":{\"title\":null,\"showLabels\":true,\"color\":\"#545454\"},\"yaxis\":{\"min\":null,\"max\":null,\"title\":null,\"showLabels\":true,\"color\":\"#545454\",\"tickSize\":null,\"tickDecimals\":0,\"ticksFormatter\":\"\"},\"shadowSize\":4,\"smoothLines\":false,\"comparisonEnabled\":false,\"xaxisSecond\":{\"axisPosition\":\"top\",\"title\":null,\"showLabels\":true},\"showLegend\":true,\"legendConfig\":{\"direction\":\"column\",\"position\":\"bottom\",\"sortDataKeys\":false,\"showMin\":false,\"showMax\":false,\"showAvg\":true,\"showTotal\":false,\"showLatest\":false},\"customLegendEnabled\":false},\"title\":\"DG_Runtime_Dief\",\"dropShadow\":true,\"enableFullscreen\":true,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"mobileHeight\":null,\"configMode\":\"advanced\",\"actions\":{},\"showTitleIcon\":false,\"titleIcon\":\"thermostat\",\"iconColor\":\"#1F6BDD\",\"useDashboardTimewindow\":false,\"displayTimewindow\":true,\"titleFont\":null,\"titleColor\":null,\"enableDataExport\":true,\"margin\":\"0\",\"widgetStyle\":{},\"widgetCss\":\"\",\"pageSize\":1024,\"noDataDisplayMessage\":\"\"}"
    },
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "ee1fd6c0-1d83-11ef-982c-0f5367becb87"
    },
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}