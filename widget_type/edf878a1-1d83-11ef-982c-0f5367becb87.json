{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "card4",
    "name" : "card4",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "timeseries",
      "sizeX" : 8,
      "sizeY" : 5,
      "resources" : [ ],
      "templateHtml" : "<section>\r\n    <div id=\"header4\">\r\n        <div id=\"logo4\">\r\n            <img src=\"https://i.pinimg.com/736x/7e/53/46/7e5346bb22bfd15fa169b621f6bc2afe.jpg\" alt=\"solar\" style=\"height:50px;width:50px\">\r\n        </div>\r\n        <div id=\"dot4\"><b>Energy</b></div>\r\n    </div>\r\n    <div id='btn4'>\r\n        <button type=\"button\" id=\"daily4\" onclick=\"daily4()\" class=\"active\">Daily</button>\r\n        <button type=\"button\" id=\"monthly4\" onclick=\"monthly4()\">Monthly</button>\r\n        <button type=\"button\" id=\"yearly4\" onclick=\"yearly4()\">Yearly</button>\r\n    </div>\r\n    <div class=\"data-container4\">\r\n        <div class=\"data-row4\" *ngFor=\"let dataKeyData of data\">\r\n            <div class=\"data-key4\">{{ dataKeyData.dataKey.label }}:</div>\r\n            <div class=\"data-value4\">{{ dataKeyData.data[0] && dataKeyData.data[0][1] | number:'1.2-2' }}</div>\r\n    \r\n        </div>\r\n    </div>\r\n</section>",
      "templateCss" : "    section {\r\n        margin: auto;\r\n        padding: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        border: 1px solid #999; \r\n        border-radius: 5px;\r\n        overflow-y: auto;\r\n    }\r\n    #header4 {\r\n        /*margin: auto;*/\r\n        /*padding: 0;*/\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n        width: 90%;\r\n    }\r\n    #dot4 {\r\n        /*height: 12px;*/\r\n        /*width: 12px;*/\r\n        /*border-radius: 50%;*/\r\n        /*background: red;*/\r\n        color: #000;\r\n    }\r\n    #btn4 {\r\n        margin: auto;\r\n        padding: 0;\r\n        display: flex;\r\n        justify-content: space-between;\r\n        border-top: 1px solid #999;\r\n        border-bottom:1px solid #999 ;\r\n    }\r\n\r\n    button {\r\n        flex-grow: 1;\r\n        padding: 10px 0;\r\n        border: none;\r\n        cursor: pointer;\r\n        background: transparent;\r\n        letter-spacing: 1px;\r\n        position: relative;\r\n        outline: none;\r\n    }\r\n     .active:after {\r\n        content: \"\";\r\n        position: absolute;\r\n        bottom: -1px;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 2px;\r\n        border: none;\r\n        border-bottom: 2px solid blue;\r\n    }\r\n\r\n    .data-container4 {\r\n        display: flex;\r\n        flex-direction: column;\r\n        margin: 10px;\r\n    }\r\n\r\n    .data-row4 {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        margin-bottom: 2px;\r\n        line-height: 20px;\r\n    }\r\n\r\n    .data-key4 {\r\n        margin-right: 5px;\r\n        color: #666;\r\n        align-content: flex-start;\r\n    }\r\n    \r\n    .data-value4 {\r\n        color: green;\r\n        align-content: flex-end;\r\n        font-weight: 600;\r\n    }\r\n    \r\n    @media (min-height: 400px) {\r\n        .data-row4 {\r\n            font-size: 12px; /* Adjust font size */\r\n            margin-bottom: 2px; /* Adjust margin */\r\n        }\r\n    }",
      "controllerScript" : "    \r\n    \r\n    self.onInit = function() {\r\n       self.ctx.$scope.data = self.ctx.defaultSubscription.data;\r\n       \r\n    }\r\n        \r\n    self.onDataUpdated = function() {\r\n        self.ctx.detectChanges();\r\n       \r\n    }\r\n    \r\n    fetching4 = function(BaseURL, DeviceId, TelemetryName, StartTs, EndTs, Authorization){\r\n        // Construct the URL for fetching telemetry data\r\n            var Url = `${BaseURL}/${DeviceId}/values/timeseries?keys=${TelemetryName}&startTs=${StartTs}&endTs=${EndTs}`;\r\n\r\n            // Prepare headers with the access token\r\n            var Headers = {\r\n            'X-Authorization': `Bearer ${Authorization}`\r\n            };\r\n\r\n            return fetch(Url, {\r\n            method: 'GET',\r\n            headers: Headers\r\n            })\r\n            .then(response => {\r\n            if (!response.ok) {\r\n            throw new Error(`Failed to fetch telemetry data: ${response.status}`);\r\n            }\r\n            return response.json();\r\n            })\r\n            .then(telemetryData => {\r\n            return telemetryData['INV_DailyEnergy_Total'];\r\n            });\r\n    }\r\n    \r\n      daily4 = function(){\r\n        document.getElementById(\"daily4\").classList.add(\"active\");\r\n        document.getElementById(\"monthly4\").classList.remove(\"active\");\r\n        document.getElementById(\"yearly4\").classList.remove(\"active\");\r\n        \r\n        self.ctx.timewindowFunctions.onResetTimewindow();\r\n        \r\n    }\r\n    \r\n    monthly4 = function() {\r\n        self.ctx.timewindowFunctions.onResetTimewindow();\r\n        document.getElementById(\"daily4\").classList.remove(\"active\");\r\n        document.getElementById(\"monthly4\").classList.add(\"active\");\r\n        document.getElementById(\"yearly4\").classList.remove(\"active\");\r\n        var currentTime4 = new Date().getTime();\r\n        var currentDate4 = new Date().getDate()\r\n        // console.log(currentDate)\r\n        // Set today's date and time to 11:59 PM\r\n        var endOfDay4 = new Date();\r\n        endOfDay4.setHours(23, 59, 0, 0);\r\n        \r\n        // Calculate milliseconds remaining until 11:59 PM today\r\n        var millisecondsRemaining4 = endOfDay4.getTime() - currentTime4;\r\n        var lastMonth4 = (currentTime4+millisecondsRemaining4) - (currentDate4*86400000)\r\n        self.ctx.timewindowFunctions.onUpdateTimewindow((lastMonth4-(2592000000)), lastMonth4)\r\n        \r\n        console.log((lastMonth4-(2592000000)), lastMonth4)\r\n}\r\n    yearly4 = function() {\r\n        self.ctx.timewindowFunctions.onResetTimewindow();\r\n        document.getElementById(\"daily4\").classList.remove(\"active\");\r\n        document.getElementById(\"monthly4\").classList.remove(\"active\");\r\n        document.getElementById(\"yearly4\").classList.add(\"active\");\r\n        // Get the current date\r\n    var currentDate4 = new Date();\r\n    \r\n    // Determine the previous year\r\n    var previousYear4 = currentDate4.getFullYear() - 1;\r\n    \r\n    // Set the date to December 31 of the previous year\r\n    var endOfPreviousYear4 = new Date(previousYear4, 11, 31);\r\n    \r\n    // Set the time to 11:59 PM\r\n    endOfPreviousYear4.setHours(23, 59, 58, 999);\r\n    \r\n    // Calculate milliseconds remaining until December 31 of the previous year, 11:59 PM\r\n    var endTime4 = endOfPreviousYear4.getTime()\r\n        console.log(449 ,endTime4, self.ctx.data)\r\n        self.ctx.timewindowFunctions.onUpdateTimewindow((endTime4-31556926000), endTime4 )\r\n        \r\n    }\r\n    ",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}",
      "latestDataKeySettingsSchema" : "{}",
      "settingsDirective" : "tb-flot-line-widget-settings",
      "dataKeySettingsDirective" : "tb-flot-line-key-settings",
      "latestDataKeySettingsDirective" : "tb-flot-latest-key-settings",
      "hasBasicMode" : true,
      "basicModeDirective" : "tb-flot-basic-config",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"First\",\"color\":\"#2196f3\",\"settings\":{\"showLines\":true,\"fillLines\":true,\"showPoints\":false},\"_hash\":0.8587686344902596,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"},{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Second\",\"color\":\"#ffc107\",\"settings\":{\"showLines\":true,\"fillLines\":false,\"showPoints\":false},\"_hash\":0.12775350966079668,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":false,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0\",\"settings\":{\"stack\":false,\"fontSize\":10,\"fontColor\":\"#545454\",\"showTooltip\":true,\"tooltipIndividual\":false,\"tooltipCumulative\":false,\"hideZeros\":false,\"grid\":{\"verticalLines\":true,\"horizontalLines\":true,\"outlineWidth\":1,\"color\":\"#545454\",\"backgroundColor\":null,\"tickColor\":\"#DDDDDD\"},\"xaxis\":{\"title\":null,\"showLabels\":true,\"color\":\"#545454\"},\"yaxis\":{\"min\":null,\"max\":null,\"title\":null,\"showLabels\":true,\"color\":\"#545454\",\"tickSize\":null,\"tickDecimals\":0,\"ticksFormatter\":\"\"},\"shadowSize\":4,\"smoothLines\":false,\"comparisonEnabled\":false,\"xaxisSecond\":{\"axisPosition\":\"top\",\"title\":null,\"showLabels\":true},\"showLegend\":true,\"legendConfig\":{\"direction\":\"column\",\"position\":\"bottom\",\"sortDataKeys\":false,\"showMin\":false,\"showMax\":false,\"showAvg\":true,\"showTotal\":false,\"showLatest\":false},\"customLegendEnabled\":false},\"title\":\"card4\",\"dropShadow\":false,\"enableFullscreen\":false,\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"mobileHeight\":null,\"configMode\":\"advanced\",\"actions\":{},\"showTitleIcon\":false,\"titleIcon\":\"thermostat\",\"iconColor\":\"#1F6BDD\",\"enableDataExport\":false,\"widgetStyle\":{},\"widgetCss\":\"\",\"pageSize\":1024,\"noDataDisplayMessage\":\"\",\"useDashboardTimewindow\":false,\"displayTimewindow\":true}"
    },
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "edf878a1-1d83-11ef-982c-0f5367becb87"
    },
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}